#!/usr/bin/env python3
"""
Quick Bedding Zone Fix Validation
================================

Tests if the production bedding zone fix is working in the real app
by directly testing the prediction service bedding zone generation.
"""

import sys
import os
import json
from datetime import datetime

# Add backend to Python path
backend_path = os.path.join(os.path.dirname(__file__), 'backend')
if backend_path not in sys.path:
    sys.path.insert(0, backend_path)

def test_bedding_fix_implementation():
    """Quick test to validate bedding fix implementation"""
    
    print("=" * 60)
    print("BEDDING ZONE FIX VALIDATION TEST")
    print("=" * 60)
    
    try:
        # Test 1: Import the bedding fix directly
        print("\n1. Testing bedding fix import...")
        from prediction_service_bedding_fix import PredictionServiceBeddingFix
        bedding_fix = PredictionServiceBeddingFix()
        print("✅ PredictionServiceBeddingFix imported and initialized successfully")
        
        # Test 2: Check if prediction service can load the fix
        print("\n2. Testing prediction service integration...")
        from services.prediction_service import PredictionService
        service = PredictionService()
        
        if hasattr(service, 'bedding_fix') and service.bedding_fix:
            print("✅ Prediction service has bedding_fix attribute loaded")
        else:
            print("❌ Prediction service does not have bedding_fix loaded")
            return False
            
        # Test 3: Test bedding zone generation directly
        print("\n3. Testing bedding zone generation...")
        test_lat, test_lon = 43.3146, -73.2178  # Tinmouth, VT
        
        # Generate bedding zones using the fix
        bedding_zones = bedding_fix.generate_fixed_bedding_zones_for_prediction_service(
            test_lat, test_lon, {}, {}, {}
        )
        
        bedding_features = bedding_zones.get("features", [])
        if bedding_features:
            print(f"✅ Bedding fix generated {len(bedding_features)} zones")
            
            # Show details of first zone
            if bedding_features:
                first_zone = bedding_features[0]
                props = first_zone.get('properties', {})
                coords = first_zone.get('geometry', {}).get('coordinates', [0, 0])
                suitability = props.get('suitability_score', 0)
                print(f"   Zone 1: {suitability:.1f}% suitability at {coords[1]:.6f}, {coords[0]:.6f}")
                
                # Check if suitability is realistic (should be >60% with our fix)
                if suitability > 60:
                    print("✅ Suitability score is realistic (>60%)")
                else:
                    print(f"❌ Suitability score too low: {suitability:.1f}%")
        else:
            print("❌ No bedding zones generated by fix")
            return False
            
        # Test 4: Verify the fix is being used in prediction pipeline
        print("\n4. Testing prediction pipeline integration...")
        
        # Check if the _execute_rule_engine method has our fix
        import inspect
        source = inspect.getsource(service._execute_rule_engine)
        if "bedding_fix" in source:
            print("✅ _execute_rule_engine method contains bedding_fix integration")
        else:
            print("❌ _execute_rule_engine method does not contain bedding_fix")
            return False
            
        print("\n" + "=" * 60)
        print("🎯 BEDDING FIX VALIDATION: SUCCESS")
        print("=" * 60)
        print("✅ Bedding fix is properly integrated and functional")
        print("✅ Generates realistic bedding zones for Tinmouth, VT")
        print("✅ Integration into prediction pipeline confirmed")
        
        return True
        
    except Exception as e:
        print(f"\n❌ Validation failed with error: {e}")
        import traceback
        print(f"Stack trace:\n{traceback.format_exc()}")
        return False

if __name__ == "__main__":
    success = test_bedding_fix_implementation()
    if success:
        print("\n🎉 The bedding zone fix is successfully implemented in the real app!")
    else:
        print("\n⚠️ The bedding zone fix implementation needs attention.")
    
    exit(0 if success else 1)
