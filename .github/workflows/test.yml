name: Automated Test Suite

on:
  push:
    branches: [ master, main, develop ]
  pull_request:
    branches: [ master, main ]
  schedule:
    # Run nightly at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:  # Allow manual trigger

jobs:
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run unit tests with coverage
      run: |
        pytest tests/unit -v --cov=backend --cov-report=xml --cov-report=term-missing -m unit
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-unit
        fail_ci_if_error: false
    
    - name: Check coverage threshold
      run: |
        pytest tests/unit --cov=backend --cov-fail-under=70 -m unit || echo "Coverage below 70% - needs improvement"

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Create GEE credentials placeholder
      run: |
        mkdir -p credentials
        echo '{}' > credentials/gee-service-account.json
    
    - name: Start Docker containers
      run: |
        docker compose up -d --build
        
        # Wait for backend health check
        echo "Waiting for backend to be ready..."
        for i in {1..30}; do
          if curl -f http://localhost:8000/health; then
            echo "Backend is ready!"
            break
          fi
          echo "Attempt $i/30: Backend not ready yet..."
          sleep 2
        done
    
    - name: Run integration tests
      run: |
        pytest tests/integration -v -m integration --tb=short
    
    - name: Show Docker logs on failure
      if: failure()
      run: |
        docker compose logs backend
        docker compose logs frontend
    
    - name: Stop Docker containers
      if: always()
      run: docker compose down

  critical-tests:
    name: Critical Tests (Regression Protection)
    runs-on: ubuntu-latest
    needs: unit-tests
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Create GEE credentials placeholder
      run: |
        mkdir -p credentials
        echo '{}' > credentials/gee-service-account.json
    
    - name: Run critical tests
      run: |
        pytest -v -m critical --tb=short
    
    - name: Post test results to PR
      if: github.event_name == 'pull_request' && always()
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const comment = `## 🧪 Critical Test Results
          
          ${process.env.TEST_STATUS === 'success' ? '✅ All critical tests passed!' : '❌ Critical tests failed - review required'}
          
          These tests protect against known issues:
          - False positive prevention (grass field detection)
          - Temporal data consistency (Hansen 2000 vs Sentinel-2)
          - Known location validation
          - API endpoint availability
          `;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });
      env:
        TEST_STATUS: ${{ job.status }}

  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]
    if: github.event_name == 'push' || github.event_name == 'schedule'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Create GEE credentials placeholder
      run: |
        mkdir -p credentials
        echo '{}' > credentials/gee-service-account.json
    
    - name: Start full Docker stack
      run: |
        docker compose up -d --build
        
        # Wait for all services
        echo "Waiting for services to be ready..."
        sleep 30
        
        docker compose ps
    
    - name: Run E2E tests
      run: |
        pytest tests/e2e -v -m e2e --tb=short
    
    - name: Show all logs on failure
      if: failure()
      run: |
        docker compose logs
    
    - name: Stop Docker containers
      if: always()
      run: docker compose down

  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, critical-tests]
    if: always()
    
    steps:
    - name: Generate summary
      run: |
        echo "## 🧪 Test Suite Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Test Type | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Unit Tests | ${{ needs.unit-tests.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Integration Tests | ${{ needs.integration-tests.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Critical Tests | ${{ needs.critical-tests.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ needs.critical-tests.result }}" == "failure" ]; then
          echo "⚠️ **CRITICAL TESTS FAILED** - Deployment blocked until resolved" >> $GITHUB_STEP_SUMMARY
        else
          echo "✅ All critical tests passed - Safe to deploy" >> $GITHUB_STEP_SUMMARY
        fi
